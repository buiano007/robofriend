{"version":3,"sources":["reportWebVitals.js","serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","constants.js","Containers/App.js","actions.js","reducers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","hasError","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.16f5f8c0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\n\nfunction Card({name, email, id }) {\n    return (\n<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" >\n    <img alt='Bret' src= {`https://robohash.org/${id}?size=200x200`}/>\n    <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n    </div>\n</div>\n    );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\n\n function CardList({ robots  }) {\n    return (\n        <div>\n           {\n            robots.map((user, i) => {\n                return ( \n                    \n                 <Card \n                key={i} \n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n\n                />\n             );\n            })\n        }\n       </div> \n       \n    );\n}\n export default CardList;\n","import React from \"react\";\n\n\nconst SearchBox = ({ searchfield, searchChange}) =>{\n    return (\n        <div className='ps2'>\n            <input \n            className=\"tc bg-light-green dib br3 pa3 ma2  v grow bw2 shadow-5\"\n             type='search'\n             placeholder='search robots'\n             onChange={searchChange}\n              />\n         </div>\n        );\n}\n\n\n\nexport default SearchBox;","import React from 'react';\nimport '../Containers/App.css';\nconst Scroll = (props) => {\n    return (\n<div className=\"style1\">\n    {props.children}\n</div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n     constructor(props){\n         super(props);\n         this.state ={\n             hasError: false\n         }\n     }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true})\n    }\n\n     render(){\n         if(this.state.hasError){\n             return <h1>Ooops Something is wrong</h1>\n         }\n         return this.props.children\n     }\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILD';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll'; \nimport ErrorBoundry from '../Components/ErrorBoundry'; \nimport './App.css';\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending:  state.requestRobots.isPending,\n        error:  state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps =(dispatch)=> {\n    return{\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    } \n}\n\n\n\nclass App extends Component {\n\n    componentDidMount(){\n        this.props.onRequestRobots(); \n       \n        }\n\n    render(){\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot =>{\n        return robot.name.toLowerCase().includes( searchField.toLowerCase());\n        })\n        return isPending  ?\n         <h2>Loading!!!</h2> :\n         (\n                <div>\n                     <h1 className=\"f2\">RoboFriends</h1>\n                     <SearchBox searchChange={onSearchChange}/>\n                     <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots } />\n                        </ErrorBoundry>\n                     </Scroll>\n                 </div>\n             );\n         } \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED } from \"./constants\"\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD ,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n     dispatch({ type: REQUEST_ROBOTS_PENDING})\n     fetch ('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n     .then(data  => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}) )\n     .catch(error  => dispatch({type: REQUEST_ROBOTS_FAILED , payload: error }))\n}","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\"\n\n\n    const initialState = {\n    searchField: ''\n}\n\n\nexport const searchRobots = (state=initialState, action={}) => {\n     switch(action.type) {\n            case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n            default:\n        return state;\n     }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case  REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending:true });\n         case  REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots:action.payload, isPending:false });\n        case  REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error:action.payload, isPending:false });  \n        default:\n            return state;\n }  \n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware  from 'redux-thunk';\nimport './index.css'; \nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n  \nconst logger = createLogger(); \n\nconst rootReducer = combineReducers ({ searchRobots, requestRobots})\nconst store =  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n \nReactDOM.render( \n    <Provider store={store}>\n      <App/>\n    </Provider>, document.getElementById('root'));\nreportWebVitals();\nserviceWorker.register();\n \n// {\n//   \"src\": \"safari-pinned-tab.svg\",\n//   \"type\": \"image/svg\",\n//   \"sizes\": \"467x467\"\n// },"],"sourceRoot":""}